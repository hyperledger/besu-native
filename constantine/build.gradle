plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.jfrog.artifactory' version '5.2.3'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':common')
    implementation 'net.java.dev.jna:jna:5.12.1'
    testImplementation 'com.google.guava:guava:31.1-jre'
    testImplementation 'io.consensys.tuweni:tuweni-bytes:2.7.1'
    testImplementation 'junit:junit:4.13.2'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task macArmLibCopy(type: Copy) {
    from "build/darwin-aarch64/lib/libconstantinebindings.dylib"
    into 'build/resources/main/lib/aarch64'
}

task macLibCopy(type: Copy) {
    from "build/darwin-x86-64/lib/libconstantinebindings.dylib"
    into 'build/resources/main/lib/x86-64'
}

task linuxLibCopy(type: Copy) {
    from "build/linux-gnu-x86_64/lib/libconstantinebindings.so"
    into 'build/resources/main/lib/x86-64'

}

task linuxArm64LibCopy(type: Copy) {
    from "build/linux-gnu-aarch64/lib/libconstantinebindings.so"
    into 'build/resources/main/lib/aarch64'
}

processResources.dependsOn macArmLibCopy, macLibCopy, linuxLibCopy, linuxArm64LibCopy

test {
    // Check if the OS architecture is riscv64
    if (System.getProperty("os.arch").equals("riscv64")) {
        // Skip for riscv64 since we are not building constantine for riscv64 yet
        enabled = false
    } else {
        // environment 'LD_LIBRARY_PATH', "${System.env.LD_LIBRARY_PATH}:build/resources/main/linux-gnu-x86_64"
        systemProperty 'jna.library.path', file('build/resources/main/linux-gnu-x86_64').absolutePath
        dependsOn macArmLibCopy, macLibCopy, linuxLibCopy, linuxArm64LibCopy
    }
}

jar {
    archiveBaseName = 'besu-native-constantine'
    includeEmptyDirs = false
    manifest {
        attributes(
                'Specification-Title': archiveBaseName,
                'Specification-Version': project.version,
                'Implementation-Title': archiveBaseName,
                'Implementation-Version': project.version,
                'Automatic-Module-Name': 'org.hyperledger.besu.nativelib.constantine'
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveBaseName = 'besu-native-constantine'
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName = 'besu-native-constantine'
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId "org.hyperledger.besu"
            artifactId 'constantine'
            version "${project.version}"

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "Besu Native - ${project.name}"
                description = 'Adapter for native constantine library'
                url = 'http://github.com/hyperledger/besu-native'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/hyperledger/besu-native.git'
                    developerConnection = 'scm:git:ssh://github.com/hyperledger/besu-native.git'
                    url = 'https://github.com/hyperledger/besu-native'
                }
            }
        }
    }
}

def artifactoryUser = project.hasProperty('artifactoryUser') ? project.property('artifactoryUser') : System.getenv('ARTIFACTORY_USER')
def artifactoryKey = project.hasProperty('artifactoryApiKey') ? project.property('artifactoryApiKey') : System.getenv('ARTIFACTORY_KEY')
def artifactoryRepo = System.getenv('ARTIFACTORY_REPO') ?: 'besu-maven'
def artifactoryOrg = System.getenv('ARTIFACTORY_ORG') ?: 'hyperledger'

artifactory {
    contextUrl = "https://hyperledger.jfrog.io/${artifactoryOrg}"
    publish {
        repository {
            repoKey = artifactoryRepo
            username = artifactoryUser
            password = artifactoryKey
        }
        defaults {
            publications('mavenJava')
            publishArtifacts = true
            publishPom = true
        }
    }
}

test {
    useJUnit()
}
